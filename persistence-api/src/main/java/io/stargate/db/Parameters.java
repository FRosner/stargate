package io.stargate.db;

import static java.lang.String.format;

import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.OptionalLong;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import org.apache.cassandra.stargate.db.ConsistencyLevel;
import org.apache.cassandra.stargate.transport.ProtocolVersion;
import org.immutables.value.Value;

/** Parameters for the execution of requests in the {@link Persistence} API. */
@Value.Immutable
public interface Parameters {
  Parameters DEFAULT = ImmutableParameters.builder().build();

  @Value.Check
  // Note that one does _not_ have to call this manually, it is called automatically by the
  // generated builder.
  default void validate() {
    if (pageSize().isPresent() && pageSize().getAsInt() <= 0) {
      throw new IllegalStateException(
          format("Invalid page size %d: must be strictly positive", pageSize().getAsInt()));
    }
  }

  /**
   * Creates a new instance using all defaults except for the client state which uses the provided
   * one.
   *
   * @param clientState the non-null client state to use in the create parameters.
   * @return the created parameters.
   */
  static Parameters defaultWith(@Nonnull ClientState clientState) {
    return ImmutableParameters.builder().clientState(clientState).build();
  }

  /**
   * The client state to use for the request this is the parameters of. If unset, a default state
   * will be generated by the underlying request.
   */
  Optional<ClientState> clientState();

  /**
   * The protocol version used for the request. In particular, this must be the version with which
   * the values of the request ({@link Statement#values()}) are encoded, and will be the version
   * with which returned values will be encoded. Defaults to {@link ProtocolVersion#CURRENT}.
   */
  @Value.Default
  default ProtocolVersion protocolVersion() {
    return ProtocolVersion.CURRENT;
  }

  /**
   * The optional page size, in rows, for the request. If unset, the request will not page. If set,
   * this must be a strictly positive number.
   */
  OptionalInt pageSize();

  /** The optional paging state to request the subsequent pages of a paged request. */
  Optional<ByteBuffer> pagingState();

  /** The consistency level for the request. Defaults to ONE. */
  @Value.Default
  default ConsistencyLevel consistencyLevel() {
    return ConsistencyLevel.ONE;
  }

  /**
   * The optional serial consistency level for the request. This is optional in that only
   * conditional (LWT) requests use a serial consistency level. If unset but the request is a
   * conditional one, a default will be used but is unspecified and might depend of the {@link
   * Persistence} implementation.
   */
  Optional<ConsistencyLevel> serialConsistencyLevel();

  /**
   * The optional default timestamp to use for the request. If unset, the default timestamp will be
   * generated by the {@link Persistence} implementation.
   */
  OptionalLong defaultTimestamp();

  /**
   * The optional time to use a "now". If unset, the current time will be generated by the {@link
   * Persistence} implementation. This option is mainly meant for testing.
   */
  OptionalInt nowInSeconds();

  /**
   * The default keyspace to use for the request (only used if the request itself does not specify a
   * keyspace). If unset, the default keyspace, if set, of the {@link #clientState()} will be used.
   * If no default is set, and the request does not specify a keyspace, the request will error out.
   */
  Optional<String> defaultKeyspace();

  /** Custom payload that can be used by the underlying {@link Persistence} implementation. */
  Optional<Map<String, ByteBuffer>> customPayload();

  /**
   * Requests to not include metadata in the result of the request (can be used when paging to
   * potentially save a few cycles since the result metadata is the same for all pages). Not set by
   * default.
   */
  @Value.Default
  default boolean skipMetadataInResult() {
    return false;
  }

  /** Enables tracing for the request. Not set by default. */
  @Value.Default
  default boolean tracingRequested() {
    return false;
  }

  /**
   * The address of the "client" making the request, as defined by the {@link #clientState()} of
   * those parameters. This can be {@code null} if no client state has been set.
   */
  default @Nullable InetAddress clientAddress() {
    return clientState().map(c -> c.getRemoteAddress().getAddress()).orElse(null);
  }

  /**
   * Copy these parameters but with the {@link #consistencyLevel()} replaced by the provided one.
   */
  default Parameters withConsistencyLevel(ConsistencyLevel newConsistencyLevel) {
    return ImmutableParameters.builder()
        .clientState(clientState())
        .protocolVersion(protocolVersion())
        .pageSize(pageSize())
        .pagingState(pagingState())
        .consistencyLevel(newConsistencyLevel)
        .serialConsistencyLevel(serialConsistencyLevel())
        .defaultTimestamp(defaultTimestamp())
        .nowInSeconds(nowInSeconds())
        .defaultKeyspace(defaultKeyspace())
        .customPayload(customPayload())
        .skipMetadataInResult(skipMetadataInResult())
        .tracingRequested(tracingRequested())
        .build();
  }

  /** Copy these parameters but with the {@link #pagingState()} ()} replaced by the provided one. */
  default Parameters withPagingState(@Nonnull ByteBuffer newPagingState) {
    return ImmutableParameters.builder()
        .clientState(clientState())
        .protocolVersion(protocolVersion())
        .pageSize(pageSize())
        .pagingState(newPagingState)
        .consistencyLevel(consistencyLevel())
        .serialConsistencyLevel(serialConsistencyLevel())
        .defaultTimestamp(defaultTimestamp())
        .nowInSeconds(nowInSeconds())
        .defaultKeyspace(defaultKeyspace())
        .customPayload(customPayload())
        .skipMetadataInResult(skipMetadataInResult())
        .tracingRequested(tracingRequested())
        .build();
  }

  /** Copy these parameters but with {@link #skipMetadataInResult()} set. */
  default Parameters withoutMetadataInResult() {
    return ImmutableParameters.builder()
        .clientState(clientState())
        .protocolVersion(protocolVersion())
        .pageSize(pageSize())
        .pagingState(pagingState())
        .consistencyLevel(consistencyLevel())
        .serialConsistencyLevel(serialConsistencyLevel())
        .defaultTimestamp(defaultTimestamp())
        .nowInSeconds(nowInSeconds())
        .defaultKeyspace(defaultKeyspace())
        .customPayload(customPayload())
        .skipMetadataInResult(true)
        .tracingRequested(tracingRequested())
        .build();
  }
}
